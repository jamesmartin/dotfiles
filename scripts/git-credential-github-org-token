#!/usr/bin/ruby

# GitHub Organization Token Credential Helper
#
# Supplies a username and password to git based on GitHub Organization Identity
# tokens. Useful for developers working with repositories owned by GitHub
# Organizations with SAML SSO configured.
#
# Installation:
#
# 1. Put this file somewhere in your $PATH and make it executable.
# 2. Create a file to store organization identity tokens:
#   * Default location is ~/.github-org-credentials
#   * Format is a JSON list of objects, each with a "org" and "token" property
#   * Example: [ { "org" : "MyOrganization", "token" : "some-org-id-token" } ]
#
# Configuration:
#
# 1. Add the helper to your global git config:
#
# git config --global credential.https://github.com\
#   helper="github-org-token --file=/path/to/github-org-credentials.json"\
#   useHttpPath=true\
#   username=octocat
#
# Or manually add the following to your ~/.gitconfig:
#
# [credential "https://github.com"]
#   helper = github-org-token --file='/path/to/credential-file.json'
#   useHttpPath = true
#   username = octocat

require "optparse"
require "json"

@options = {}
OptionParser.new do |opts|
  opts.banner = "USAGE: ..."
  opts.on("-f", "--file PATH", "(Optional) specify a github-org-credentials (JSON) file") do |arg|
    @options[:path] = File.expand_path(arg)
  end

  opts.on("-d", "--debug", "send debug info to STDERR") do |d|
    @options[:debug] = d
  end
end.parse!

# git reads output on $stdout as credentials, so for debugging we fallback to
# $stderr
def debug(message)
  $stderr.puts(message) if @options[:debug]
end

class OrganizationTokenFinder
  DEFAULT_CREDENTIALS_FILE = "~/.github-org-credentials"

  def initialize(credentials_path, debug=nil)
    @credentials_path = credentials_path
    @options = { debug: debug }
  end

  def token_for_org(org_name)
    if cred = stored_credentials.find { |cred| cred["org"] == wanted_org(org_name) }
      cred["token"]
    end
  end

  def has_credentials?
    stored_credentials.any?
  end

  def stored_credentials
    @stored_credentials ||= JSON.parse(File.read(credentials_file))
  end

  # Either the file passed to .new, or the default credentials
  def credentials_file
    if @credentials_path && File.readable?(@credentials_path)
      @credentials_path
    elsif File.readable?(default_credentials_path)
      default_credentials_path
    end
  end

  private

  # Private: extracts the organization name from a github.com URL path
  # E.g.
  # foo/bar => foo
  # foo-bar/baz => foo-bar
  def wanted_org(name)
    debug("Name: #{name}")
    r = Regexp.new(/(?<org_name>\A[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*)\/*/)
    @wanted_org ||= r.match(name) && r.match(name)[:org_name]
    debug("Wanted org: #{@wanted_org}")
    @wanted_org
  end

  def default_credentials_path
    File.expand_path(DEFAULT_CREDENTIALS_FILE)
  end
end

if $0 == __FILE__

  token_finder = OrganizationTokenFinder.new(@options[:path], @options[:debug])

  debug("Action: #{ARGV[0] && ARGV[0].downcase}")
  debug("File: #{token_finder.credentials_file}")
  debug("Stored credentials: #{token_finder.stored_credentials}")

  # Only attempt to fulfill credentials when a credentials file exists and we
  # are being asked to "get" credentials (we don't respond to 'store' or
  # 'erase') 
  exit(0) unless token_finder.has_credentials?
  exit(0) unless ARGV[0] && ARGV[0].downcase == "get"

  credential_args = {}
  while line = $stdin.gets
    break if line.strip == ""
    k,v = line.strip.split("=", 2)
    credential_args[k] = v
  end

  # We need the 'path' argument from the repository to figure out the name of
  # the organization. 
  # Note: Git only passes the path when the credential helper is
  # configured with useHttpPath=true
  debug("Git credential args: #{credential_args}")
  exit(0) unless credential_args["path"]

  username = credential_args["username"]
  token = token_finder.token_for_org(credential_args["path"])

  debug("Org token: #{token}")
  debug("Username: #{username}")
  exit(0) unless token && username

  # STDOUT format that git expects for credentials
  puts "username=#{username}"
  puts "password=#{token}"
  exit(0)
end
